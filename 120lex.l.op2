/*	$Id: lexer.l,v 1.2 1997/11/19 15:13:15 sandro Exp $	*/

/*
 * Copyright (c) 1997 Sandro Sigala <ssigala@globalnet.it>.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 * ISO C++ lexical analyzer.
 *
 * Based on the ISO C++ draft standard of December '96.
 */

%{
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <ctype.h>

#include "errors.h"
#include "token.h"
#include "120parse.h"
#include "120gram.h"

typedef struct FileStack FileStack;
struct FileStack {
   char *filename;
	int lineno;
	FileStack *next;
};

FileStack *topFile = NULL;
int lineno;
TreeNode *n;
FILE *saved_yyin;

static int yywrap(void);
void handle_include();
void pushFileStack();
void popFileStack();
static void skip_until_eol(void);
static void skip_comment(void);
static int check_identifier(char *);
static int alac(int);
void lexerr(char *);

int included_iostream = 0;
int included_cstdlib = 0;
int included_ctime = 0; 
int included_string = 0;
int included_fstream = 0;
int included_stdio = 0; 
int included_stdlib = 0;

%}

intsuffix				([uU][lL]?)|([lL][uU]?)
fracconst				([0-9]*\.[0-9]+)|([0-9]+\.)
exppart					[eE][-+]?[0-9]+
floatsuffix				[fFlL]
chartext					([^'])|(\\.)
stringtext				([^"])|(\\.)

%%

"\n"											{ ++lineno; }
[\t\f\v\r ]+								{ /* Ignore whitespace. */ }

"/*"											{ skip_comment(); }
"//"											{ skip_until_eol(); }

"{"											{ return '{'; }
"<%"											{ return '{'; }
"}"											{ return '}'; }
"%>"											{ return '}'; }
"["											{ return '['; }
"<:"											{ return '['; }
"]"											{ return ']'; }
":>"											{ return ']'; }
"("											{ return '('; }
")"											{ return ')'; }
";"											{ return ';'; }
":"											{ return ':'; }
"..."											{ return alac(ELLIPSIS); }
"?"											{ return '?'; }
"::"											{ return alac(COLONCOLON); }
"."											{ return '.'; }
".*"											{ return alac(DOTSTAR); }
"+"											{ return '+'; }
"-"											{ return '-'; }
"*"											{ return '*'; }
"/"											{ return '/'; }
"%"											{ return '%'; }
"^"											{ return '^'; }
"xor"											{ return '^'; }
"&"											{ return '&'; }
"bitand"										{ return '&'; }
"|"											{ return '|'; }
"bitor"										{ return '|'; }
"~"											{ return '~'; }
"compl"										{ return '~'; }
"!"											{ return '!'; }
"not"											{ return '!'; }
"="											{ return '='; }
"<"											{ return '<'; }
">"											{ return '>'; }
"+="											{ return alac(ADDEQ); }
"-="											{ return alac(SUBEQ); }
"*="											{ return alac(MULEQ); }
"/="											{ return alac(DIVEQ); }
"%="											{ return alac(MODEQ); }
"^="											{ return alac(XOREQ); }
"xor_eq"										{ return alac(XOREQ); }
"&="											{ return alac(ANDEQ); }
"and_eq"										{ return alac(ANDEQ); }
"|="											{ return alac(OREQ); }
"or_eq"										{ return alac(OREQ); }
"<<"											{ return alac(SL); }
">>"											{ return alac(SR); }
"<<="											{ return alac(SLEQ); }
">>="											{ return alac(SREQ); }
"=="											{ return alac(EQ); }
"!="											{ return alac(NOTEQ); }
"not_eq"										{ return alac(NOTEQ); }
"<="											{ return alac(LTEQ); }
">="											{ return alac(GTEQ); }
"&&"											{ return alac(ANDAND); }
"and"											{ return alac(ANDAND); }
"||"											{ return alac(OROR); }
"or"											{ return alac(OROR); }
"++"											{ return alac(PLUSPLUS); }
"--"											{ return alac(MINUSMINUS); }
","											{ return ','; }
"->*"											{ return alac(ARROWSTAR); }
"->"											{ return alac(ARROW); }

"asm"											{ return alac(ASM); }
"auto"										{ return alac(AUTO); }
"bool"										{ return alac(BOOL); }
"break"										{ return alac(BREAK); }
"case"										{ return alac(CASE); }
"catch"										{ return alac(CATCH); }
"char"										{ return alac(CHAR); }
"class"										{ return alac(CLASS); }
"const"										{ return alac(CONST); }
"const_cast"								{ return alac(CONST_CAST); }
"continue"									{ return alac(CONTINUE); }
"default"									{ return alac(DEFAULT); }
"delete"										{ return alac(DELETE); }
"do"											{ return alac(DO); }
"double"										{ return alac(DOUBLE); }
"dynamic_cast"								{ return alac(DYNAMIC_CAST); }
"else"										{ return alac(ELSE); }
"enum"										{ return alac(ENUM); }
"explicit"									{ return alac(EXPLICIT); }
"export"										{ return alac(EXPORT); }
"extern"										{ return alac(EXTERN); }
"false"										{ return alac(FALSE); }
"float"										{ return alac(FLOAT); }
"for"											{ return alac(FOR); }
"friend"										{ return alac(FRIEND); }
"goto"										{ return alac(GOTO); }
"if"											{ return alac(IF); }
"inline"										{ return alac(INLINE); }
"int"											{ return alac(INT); }
"long"										{ return alac(LONG); }
"mutable"									{ return alac(MUTABLE); }
"namespace"									{ return alac(NAMESPACE); }
"new"											{ return alac(NEW); }
"operator"									{ return alac(OPERATOR); }
"private"									{ return alac(PRIVATE); }
"protected"									{ return alac(PROTECTED); }
"public"										{ return alac(PUBLIC); }
"register"									{ return alac(REGISTER); }
"reinterpret_cast"						{ return alac(REINTERPRET_CAST); }
"return"										{ return alac(RETURN); }
"short"										{ return alac(SHORT); }
"signed"										{ return alac(SIGNED); }
"sizeof"										{ return alac(SIZEOF); }
"static"										{ return alac(STATIC); }
"static_cast"								{ return alac(STATIC_CAST); }
"struct"										{ return alac(STRUCT); }
"switch"										{ return alac(SWITCH); }
"template"									{ return alac(TEMPLATE); }
"this"										{ return alac(THIS); }
"throw"										{ return alac(THROW); }
"true"										{ return alac(TRUE); }
"try"											{ return alac(TRY); }
"typedef"									{ return alac(TYPEDEF); }
"typeid"										{ return alac(TYPEID); }
"typename"									{ return alac(TYPENAME); }
"union"										{ return alac(UNION); }
"unsigned"									{ return alac(UNSIGNED); }
"using"										{ return alac(USING); }
"virtual"									{ return alac(VIRTUAL); }
"void"										{ return alac(VOID); }
"volatile"									{ return alac(VOLATILE); }
"wchar_t"									{ return alac(WCHAR_T); }
"while"										{ return alac(WHILE); }
													
"#include"[ ]*\"[^\\"]+\"  			{ handle_include(); }

"#include <iostream>"   				{ included_iostream = 1; }
"#include <cstdlib>"    				{ included_cstdlib = 1; }
"#include <ctime>"      				{ included_ctime = 1; }
"#include <string>"     				{ included_string = 1; }
"#include <string.h>"     				{ included_string = 1; }
"#include <fstream>"    				{ included_fstream = 1; }
"#include <stdio.h>"    				{ included_stdio = 1; }
"#include <stdlib.h>"   				{ included_stdlib = 1; }

[a-zA-Z_][a-zA-Z_0-9]*					{ return alac(check_identifier(yytext)); }

"0"[xX][0-9a-fA-F]+{intsuffix}?		{ return alac(INTEGER); }
"0"[0-7]+{intsuffix}?					{ return alac(INTEGER); }
[0-9]+{intsuffix}?						{ return alac(INTEGER); }

{fracconst}{exppart}?{floatsuffix}?	{ return alac(FLOATING); }
[0-9]+{exppart}{floatsuffix}?			{ return alac(FLOATING); }

"'"{chartext}*"'"							{ return alac(CHARACTER); }
"L'"{chartext}*"'"						{ return alac(CHARACTER); }
"'"{chartext}*								{ getErrorMessage(ER_MALF_CHAR); }
"L'"{chartext}*							{ getErrorMessage(ER_MALF_CHAR); }
"\""{stringtext}*"\""					{ return alac(STRING); }
"L\""{stringtext}*"\""					{ return alac(STRING); }
"\""{stringtext}*							{ getErrorMessage(ER_STRING_CLOSE);
													lexerr(NULL); }
"L\""{stringtext}*						{ getErrorMessage(ER_STRING_CLOSE);
													lexerr(NULL); }
													
.												{ getErrorMessage(ER_UNREC_TOKEN);
													lexerr(NULL); }

<<EOF>>                 				{ popFileStack();
													yypop_buffer_state();
													if ( !YY_CURRENT_BUFFER ) {
														yyterminate();
													}
												}
%%

static int
yywrap(void)
{
	return 1;
}

void pushFileStack(){
	FileStack *fileStack = (FileStack *)calloc(1, sizeof(FileStack));
	if(fileStack == NULL) memoryError();
	char *filename = (char *)calloc(strlen(fname) + 1, sizeof(char));
	if(filename == NULL) memoryError();
	strcpy(filename, fname);
	fileStack->filename = filename;
	fileStack->lineno = lineno;
	if (topFile == NULL){
		topFile = fileStack;
		topFile->next = NULL;
	} else {
		fileStack->next = topFile;
		topFile = fileStack;
	}
}

void popFileStack(){
	if(topFile!=NULL){
		fname = topFile->filename;
		lineno = topFile->lineno;
		topFile=topFile->next;
	}
}

void handle_include()
{
	pushFileStack();
   lineno = 1;
   saved_yyin = yyin;
	
   fname = strchr(yytext, '\"')+1;
   fname[strlen(fname)-1] = '\0';
   yyin = fopen(fname,"r");
   if (yyin == NULL) {
     lexerr("cannot open include file");
     exit(1);
   }
	yypush_buffer_state(yy_create_buffer(yyin, YY_BUF_SIZE));
}

/*
 * We use this routine instead a lex pattern because we don't need
 * to save the matched comment in the `yytext' buffer.
 */
static void
skip_comment(void)
{
	int c1, c2;

	c1 = input();
	c2 = input();

	while (c2 != EOF && !(c1 == '*' && c2 == '/')) {
		if (c1 == '\n')
			++lineno;
		c1 = c2;
		c2 = input();
	}
}

/*
 * See the previous comment for an explanation.
 */
static void
skip_until_eol(void)
{
	int c;

	while ((c = input()) != EOF && c != '\n')
		;
	++lineno;
}

/*
 * Type name table.
 * Replace this with a hash table, when you get a chance.
 */
struct typenametable_entry {
   char *name;
   int category;
   struct typenametable_entry *next;
   } *head;

int typenametable_lookup(char *s)
{
   struct typenametable_entry *tmp = head;
   while (tmp) {
      if (!strcmp(s, tmp->name)) return tmp->category;
      tmp = tmp->next;
   }	
	if(strcmp(s, "string") == 0){
		typenametable_insert(s, STR_TYPE);
		return STR_TYPE;
	}
   return IDENTIFIER;
}

int typenametable_insert(char *s, int cat)
{
   struct typenametable_entry *tmp = head;
   while (tmp) {
      if (!strcmp(s, tmp->name)) {
         fprintf(stderr,
	    "warning, %s is already in the typename table as a %d\n",
	    s, tmp->category );
         return tmp->category;
         }
      tmp = tmp->next;
   }
   tmp = calloc(1, sizeof (struct typenametable_entry));
   if(!tmp) { memoryError();/*fprintf(stderr, "tnti out of memory\n"); return -1;*/ }
   tmp->name = strdup(s);
   tmp->category = cat;
   tmp->next = head;
   head = tmp;
}

static int
check_identifier(char *s)
{
	return typenametable_lookup(s);
}

static int alac(int tcode)
{
	printf("\n*** New Node ***\n");
	int i;
	if((yylval.n = (TreeNode *)calloc(1, sizeof(TreeNode))) == NULL) memoryError(); 
	yylval.n->symbol = yytext;

	if((yylval.n->u.t.token = (Token *)calloc(1, sizeof(Token))) == NULL) memoryError();
	
	yylval.n->u.t.token->category = tcode;
	
	int length = strlen(yytext) + 1;
	char *text = (char *)calloc(length, sizeof(char));
	if(text == NULL) memoryError();
   strcpy(text, yytext); 
   yylval.n->u.t.token->text = text;
	printf("%s\n", text);
	
   yylval.n->u.t.token->lineno = lineno;
	
	char *filename = (char *)calloc(strlen(fname) + 1, sizeof(char));
	if(filename == NULL) memoryError();
	strcpy(filename, fname);
   yylval.n->u.t.token->filename =filename;
	
	if(tcode == INTEGER) yylval.n->u.t.token->ival = atoi(yylval.n->u.t.token->text);

   if(tcode == STRING){
      yylval.n->u.t.token->ival = length;
      int *st = (int *)calloc(length, sizeof(int));
		if(st == NULL) memoryError();
      int i;
      for(i = 0; i < length; i++) st[i] = (int)text[i];
      yylval.n->u.t.token->sval = st;
   }
	else yylval.n->u.t.token->sval = NULL;

	//yylval.n->u.t.token = token;
	
	return tcode;
}

void lexerr(char *s)
{
   errors++;
   fprintf(stderr, "\nLexical Error #%d: %s, line: %d ", errors, fname, lineno);
	if(s != NULL) fprintf(stderr, "%s\t\'%s\' %s\n",e_message->errorType, s, e_message->message);
	else fprintf(stderr, "%s\t%s\n",e_message->errorType, e_message->message);
	fflush(stderr);
}
