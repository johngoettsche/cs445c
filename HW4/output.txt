*** parse successful ***
 program: 1
 declaration_seq_opt: 1
  declaration_seq: 1
   declaration: 1
    function_definition: 4
     decl_specifier_seq: 1
      decl_specifier: 1
       type_specifier: 1
        simple_type_specifier: 1
         INT: int
     declarator: 1
      direct_declarator: 2
       direct_declarator: 1
        declarator_id: 1
         id_expression: 1
          unqualified_id: 1
           identifier: 1
            IDENTIFIER: main
       parameter_declaration_clause: 0
     ctor_initializer_opt: 0
     function_body: 1
      compound_statement: 1
       statement_seq_opt: 1
        statement_seq: 2
         statement_seq: 1
          statement: 1
           expression_statement: 1
            expression_opt: 1
             expression: 1
              assignment_expression: 1
               conditional_expression: 1
                logical_or_expression: 1
                 logical_and_expression: 1
                  inclusive_or_expression: 1
                   exclusive_or_expression: 1
                    and_expression: 1
                     equality_expression: 1
                      relational_expression: 1
                       shift_expression: 1
                        additive_expression: 1
                         multiplicative_expression: 1
                          pm_expression: 1
                           cast_expression: 1
                            unary_expression: 1
                             postfix_expression: 2
                              postfix_expression: 1
                               primary_expression: 1
                                id_expression: 1
                                 unqualified_id: 1
                                  identifier: 1
                                   IDENTIFIER: printf
                              expression_list_opt: 1
                               expression_list: 1
                                assignment_expression: 1
                                 conditional_expression: 1
                                  logical_or_expression: 1
                                   logical_and_expression: 1
                                    inclusive_or_expression: 1
                                     exclusive_or_expression: 1
                                      and_expression: 1
                                       equality_expression: 1
                                        relational_expression: 1
                                         shift_expression: 1
                                          additive_expression: 1
                                           multiplicative_expression: 1
                                            pm_expression: 1
                                             cast_expression: 1
                                              unary_expression: 1
                                               postfix_expression: 1
                                                primary_expression: 1
                                                 literal: 1
                                                  string_literal: 1
                                                   STRING: "Hello World!"
         statement: 1
          jump_statement: 2
           RETURN: return
           expression_opt: 1
            expression: 1
             assignment_expression: 1
              conditional_expression: 1
               logical_or_expression: 1
                logical_and_expression: 1
                 inclusive_or_expression: 1
                  exclusive_or_expression: 1
                   and_expression: 1
                    equality_expression: 1
                     relational_expression: 1
                      shift_expression: 1
                       additive_expression: 1
                        multiplicative_expression: 1
                         pm_expression: 1
                          cast_expression: 1
                           unary_expression: 1
                            postfix_expression: 1
                             primary_expression: 1
                              literal: 1
                               integer_literal: 1
                                INTEGER: 0
*** building types ***
simple type specifier8
type specifier1
decl specifier2
decl specifier seq1
identifier1
unqualified id1
id expression1
declarator id1
direct declarator1
parameter declaration clause4
direct declarator5
*addParamsToFunction*
*passTypeBelowPointer*
declarator1 
ctor initializer opt1
identifier1
unqualified id1
id expression1
primary expression4
postfix expression1
string literal1
literal4
primary expression1
postfix expression1
unary expression1
cast_expression1
pm_expression1
multiplicative_expression1
additive_expression1
shift_expression1
relational_expression1
equality_expression1
and_expression1
exclusive_or_expression1
inclusive_or_expression1
logical and expression1
logical or expression1
conditional expression1
assignment expression1
expression list1
expression list opt2
postfix expression3
unary expression1
cast_expression1
pm_expression1
multiplicative_expression1
additive_expression1
shift_expression1
relational_expression1
equality_expression1
and_expression1
exclusive_or_expression1
inclusive_or_expression1
logical and expression1
logical or expression1
conditional expression1
assignment expression1
expression1
expression opt2
expression statement1
statement2
statement seq1
integer literal1
literal1
primary expression1
postfix expression1
unary expression1
cast_expression1
pm_expression1
multiplicative_expression1
additive_expression1
shift_expression1
relational_expression1
equality_expression1
and_expression1
exclusive_or_expression1
inclusive_or_expression1
logical and expression1
logical or expression1
conditional expression1
assignment expression1
expression1
expression opt2
jump_statement3statement6
statement seq2
statement seq opt2
compound statement1
function body1
function definition2
declaration2
declaration seq1
declaration seq opt2
translation unit1
*** build types successful ***
	*createGlobalSymbolTable*
global ST: 31
 program: 1 program  - program
 declaration_seq_opt: 1 main  - function int
  declaration_seq: 1 main  - function int
   declaration: 1 main  - function int
    function_definition: 4 main  - function int
     decl_specifier_seq: 1 - int
      decl_specifier: 1 - int
       type_specifier: 1 - int
        simple_type_specifier: 1 - int
         INT: int - int
     declarator: 1 main  - function int
      direct_declarator: 2 main  - function int
       direct_declarator: 1 main  - function
        declarator_id: 1 main  - function
         id_expression: 1 main  - function
          unqualified_id: 1 main  - function
           identifier: 1 main  - function
            IDENTIFIER: main - function
       parameter_declaration_clause: 0 - NULL
     ctor_initializer_opt: 0 - NULL
     function_body: 1 - function
      compound_statement: 1 - statement
       statement_seq_opt: 1 - touple
        statement_seq: 2 - touple
         statement_seq: 1 - statement
          statement: 1 - statement
           expression_statement: 1 - statement
            expression_opt: 1 printf  - UNKNOWN TYPE
             expression: 1 printf  - UNKNOWN TYPE
              assignment_expression: 1 printf  - UNKNOWN TYPE
               conditional_expression: 1 printf  - UNKNOWN TYPE
                logical_or_expression: 1 printf  - UNKNOWN TYPE
                 logical_and_expression: 1 printf  - UNKNOWN TYPE
                  inclusive_or_expression: 1 printf  - UNKNOWN TYPE
                   exclusive_or_expression: 1 printf  - UNKNOWN TYPE
                    and_expression: 1 printf  - UNKNOWN TYPE
                     equality_expression: 1 printf  - UNKNOWN TYPE
                      relational_expression: 1 printf  - UNKNOWN TYPE
                       shift_expression: 1 printf  - UNKNOWN TYPE
                        additive_expression: 1 printf  - UNKNOWN TYPE
                         multiplicative_expression: 1 printf  - UNKNOWN TYPE
                          pm_expression: 1 printf  - UNKNOWN TYPE
                           cast_expression: 1 printf  - UNKNOWN TYPE
                            unary_expression: 1 printf  - UNKNOWN TYPE
                             postfix_expression: 2 printf  - UNKNOWN TYPE
                              postfix_expression: 1 printf  - UNKNOWN TYPE
                               primary_expression: 1 printf  - UNKNOWN TYPE
                                id_expression: 1 printf  - UNKNOWN TYPE
                                 unqualified_id: 1 printf  - UNKNOWN TYPE
                                  identifier: 1 printf  - UNKNOWN TYPE
                                   IDENTIFIER: printf - UNKNOWN TYPE
                              expression_list_opt: 1 "Hello World!"  - string
                               expression_list: 1 "Hello World!"  - string
                                assignment_expression: 1 "Hello World!"  - string
                                 conditional_expression: 1 "Hello World!"  - string
                                  logical_or_expression: 1 "Hello World!"  - string
                                   logical_and_expression: 1 "Hello World!"  - string
                                    inclusive_or_expression: 1 "Hello World!"  - string
                                     exclusive_or_expression: 1 "Hello World!"  - string
                                      and_expression: 1 "Hello World!"  - string
                                       equality_expression: 1 "Hello World!"  - string
                                        relational_expression: 1 "Hello World!"  - string
                                         shift_expression: 1 "Hello World!"  - string
                                          additive_expression: 1 "Hello World!"  - string
                                           multiplicative_expression: 1 "Hello World!"  - string
                                            pm_expression: 1 "Hello World!"  - string
                                             cast_expression: 1 "Hello World!"  - string
                                              unary_expression: 1 "Hello World!"  - string
                                               postfix_expression: 1 "Hello World!"  - string
                                                primary_expression: 1 "Hello World!"  - string
                                                 literal: 1 "Hello World!"  - string
                                                  string_literal: 1 "Hello World!"  - string
                                                   STRING: "Hello World!" - string
         statement: 1 0  - int
          jump_statement: 2 0  - int
           RETURN: return - int
           expression_opt: 1 0  - int
            expression: 1 0  - int
             assignment_expression: 1 0  - int
              conditional_expression: 1 0  - int
               logical_or_expression: 1 0  - int
                logical_and_expression: 1 0  - int
                 inclusive_or_expression: 1 0  - int
                  exclusive_or_expression: 1 0  - int
                   and_expression: 1 0  - int
                    equality_expression: 1 0  - int
                     relational_expression: 1 0  - int
                      shift_expression: 1 0  - int
                       additive_expression: 1 0  - int
                        multiplicative_expression: 1 0  - int
                         pm_expression: 1 0  - int
                          cast_expression: 1 0  - int
                           unary_expression: 1 0  - int
                            postfix_expression: 1 0  - int
                             primary_expression: 1 0  - int
                              literal: 1 0  - int
                               integer_literal: 1 0  - int
                                INTEGER: 0 - int
*** adding symbol tables ***
identifier 1
identifier 1
		SymbolTable: program
function definition 2
adding to symbol table program:
function main
ret: int

addToSymbolTable: [1]
	*createSymbolTable*
**addFunctionBodySymbols**
**** 0 ****
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
identifier 1
UNKNOWN TYPE printf
		SymbolTable: main
		SymbolTable: main
Temp: NULL
UNKNOWN TYPE printf
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
literal 4
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
jump_statement 3*** int : int ***
	int : int
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
literal
temp count: 0
_Const_0 0
adding to symbol table main:
int _Const_0

addToSymbolTable: [1]
**addFunctionBodySymbols**
**addFunctionBodySymbols**
function definition 2 complete [1]
translation unit 1
translation unit 1 complete
*** make symbol tables successful ***
 program: 1 program  - program
 declaration_seq_opt: 1 main  - function int
  declaration_seq: 1 main  - function int
   declaration: 1 main  - function int
    function_definition: 4 main  - function int
     decl_specifier_seq: 1 - int
      decl_specifier: 1 - int
       type_specifier: 1 - int
        simple_type_specifier: 1 - int
         INT: int - int
     declarator: 1 main  - function int
      direct_declarator: 2 main  - function int
       direct_declarator: 1 main  - function
        declarator_id: 1 main  - function
         id_expression: 1 main  - function
          unqualified_id: 1 main  - function
           identifier: 1 main  - function
            IDENTIFIER: main - function
       parameter_declaration_clause: 0 - NULL
     ctor_initializer_opt: 0 - NULL
     function_body: 1 - function
      compound_statement: 1 - statement
       statement_seq_opt: 1 - touple
        statement_seq: 2 - touple
         statement_seq: 1 - statement
          statement: 1 - statement
           expression_statement: 1 - statement
            expression_opt: 1 printf  - UNKNOWN TYPE
             expression: 1 printf  - UNKNOWN TYPE
              assignment_expression: 1 printf  - UNKNOWN TYPE
               conditional_expression: 1 printf  - UNKNOWN TYPE
                logical_or_expression: 1 printf  - UNKNOWN TYPE
                 logical_and_expression: 1 printf  - UNKNOWN TYPE
                  inclusive_or_expression: 1 printf  - UNKNOWN TYPE
                   exclusive_or_expression: 1 printf  - UNKNOWN TYPE
                    and_expression: 1 printf  - UNKNOWN TYPE
                     equality_expression: 1 printf  - UNKNOWN TYPE
                      relational_expression: 1 printf  - UNKNOWN TYPE
                       shift_expression: 1 printf  - UNKNOWN TYPE
                        additive_expression: 1 printf  - UNKNOWN TYPE
                         multiplicative_expression: 1 printf  - UNKNOWN TYPE
                          pm_expression: 1 printf  - UNKNOWN TYPE
                           cast_expression: 1 printf  - UNKNOWN TYPE
                            unary_expression: 1 printf  - UNKNOWN TYPE
                             postfix_expression: 2 printf  - UNKNOWN TYPE
                              postfix_expression: 1 printf  - UNKNOWN TYPE
                               primary_expression: 1 printf  - UNKNOWN TYPE
                                id_expression: 1 printf  - UNKNOWN TYPE
                                 unqualified_id: 1 printf  - UNKNOWN TYPE
                                  identifier: 1 printf  - UNKNOWN TYPE
                                   IDENTIFIER: printf - UNKNOWN TYPE
                              expression_list_opt: 1 "Hello World!"  - string
                               expression_list: 1 "Hello World!"  - string
                                assignment_expression: 1 "Hello World!"  - string
                                 conditional_expression: 1 "Hello World!"  - string
                                  logical_or_expression: 1 "Hello World!"  - string
                                   logical_and_expression: 1 "Hello World!"  - string
                                    inclusive_or_expression: 1 "Hello World!"  - string
                                     exclusive_or_expression: 1 "Hello World!"  - string
                                      and_expression: 1 "Hello World!"  - string
                                       equality_expression: 1 "Hello World!"  - string
                                        relational_expression: 1 "Hello World!"  - string
                                         shift_expression: 1 "Hello World!"  - string
                                          additive_expression: 1 "Hello World!"  - string
                                           multiplicative_expression: 1 "Hello World!"  - string
                                            pm_expression: 1 "Hello World!"  - string
                                             cast_expression: 1 "Hello World!"  - string
                                              unary_expression: 1 "Hello World!"  - string
                                               postfix_expression: 1 "Hello World!"  - string
                                                primary_expression: 1 "Hello World!"  - string
                                                 literal: 1 "Hello World!"  - string
                                                  string_literal: 1 "Hello World!"  - string
                                                   STRING: "Hello World!" - string
         statement: 1 _Const_0  - int
          jump_statement: 2 _Const_0  - int
           RETURN: return - int
           expression_opt: 1 _Const_0  - int
            expression: 1 _Const_0  - int
             assignment_expression: 1 _Const_0  - int
              conditional_expression: 1 _Const_0  - int
               logical_or_expression: 1 _Const_0  - int
                logical_and_expression: 1 _Const_0  - int
                 inclusive_or_expression: 1 _Const_0  - int
                  exclusive_or_expression: 1 _Const_0  - int
                   and_expression: 1 _Const_0  - int
                    equality_expression: 1 _Const_0  - int
                     relational_expression: 1 _Const_0  - int
                      shift_expression: 1 _Const_0  - int
                       additive_expression: 1 _Const_0  - int
                        multiplicative_expression: 1 _Const_0  - int
                         pm_expression: 1 _Const_0  - int
                          cast_expression: 1 _Const_0  - int
                           unary_expression: 1 _Const_0  - int
                            postfix_expression: 1 _Const_0  - int
                             primary_expression: 1 _Const_0  - int
                              literal: 1 _Const_0  - int
                               integer_literal: 1 _Const_0  - int
                                INTEGER: 0 - int
*** print tree successful ***
*** Calculating Offsets ***
*** Calculating Offsets ***
program: [0]
0	int main()
----------------------
function main: [16]
8	int _Const_0
----------------------
*** Intermediate Code Generation ***
simple_type_specifier
type_specifier
decl_specifier
decl_specifier_seq
identifier
unqualified_id
id_expression
declarator
ctor_initializer_opt
identifier
unqualified_id
id_expression
primary_expression
postfix_expression
string_literal
literal
primary_expression
postfix_expression
unary_expression
cast_expression
pm_expression
multiplicative_expression
additive_expression
shift_expression
relational_expression
equality_expression
and_expression
exclusive_or_expression
inclusive_or_expression
logical_and_expression
logical_or_expression
conditional_expression
assignment_expression
expression_list
expression_list_opt
unary_expression
cast_expression
pm_expression
multiplicative_expression
additive_expression
shift_expression
relational_expression
equality_expression
and_expression
exclusive_or_expression
inclusive_or_expression
logical_and_expression
logical_or_expression
conditional_expression
assignment_expression
expression
expression_opt
expression_statement
statement
statement_seq
integer_literal
literal
primary_expression
postfix_expression
unary_expression
cast_expression
pm_expression
multiplicative_expression
additive_expression
shift_expression
relational_expression
equality_expression
and_expression
exclusive_or_expression
inclusive_or_expression
logical_and_expression
logical_or_expression
conditional_expression
assignment_expression
expression
expression_opt
jump_statement
		SymbolTable: main
                          RETURN    Const:(null)
statement
                          RETURN    Const:(null)
statement_seq
                          RETURN    Const:(null)
statement_seq_opt
                          RETURN    Const:(null)
                          RETURN    Const:(null)
compound_statement
                          RETURN    Const:(null)
function_body
                          RETURN    Const:(null)
function_definition
main:
                          RETURN    Const:(null)
declaration
main:
                          RETURN    Const:(null)
declaration_seq
main:
                          RETURN    Const:(null)
declaration_seq_opt
main:
                          RETURN    Const:(null)
main:
                          RETURN    Const:(null)
program
program: [0]
0	int main()
----------------------
function main: [16]
8	int _Const_0
----------------------
.string:
.code:
main:
                          RETURN    Const:(null)

3
