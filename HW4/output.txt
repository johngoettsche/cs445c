simple type specifier8
type specifier1
decl specifier2
decl specifier seq1
identifier1
unqualified id1
id expression1
declarator id1
direct declarator1
parameter declaration clause4
direct declarator5
*addParamsToFunction*
*passTypeBelowPointer*
declarator1 
ctor initializer opt1
simple type specifier8
type specifier1
decl specifier2
decl specifier seq1
identifier1
unqualified id1
id expression1
declarator id1
direct declarator1
declarator1 
integer literal1
literal1
primary expression1
postfix expression1
unary expression1
cast_expression1
pm_expression1
multiplicative_expression1
additive_expression1
shift_expression1
relational_expression1
equality_expression1
and_expression1
exclusive_or_expression1
inclusive_or_expression1
logical and expression1
logical or expression1
conditional expression1
assignment expression1
initializer clause1
initializer1
initializer opt
init declarator1 
init declarator list1
simple declaration1
*passTypeBelowPointer*
block declaration1
declaration statement1
statement7
statement seq1
identifier1
unqualified id1
id expression1
primary expression4
postfix expression1
unary expression1
cast_expression1
pm_expression1
multiplicative_expression1
additive_expression1
shift_expression1
relational_expression1
integer literal1
literal1
primary expression1
postfix expression1
unary expression1
cast_expression1
pm_expression1
multiplicative_expression1
additive_expression1
shift_expression1
relational_expression2
equality_expression1
and_expression1
exclusive_or_expression1
inclusive_or_expression1
logical and expression1
logical or expression1
conditional expression1
assignment expression1
expression1
condition1
identifier1
unqualified id1
id expression1
primary expression4
postfix expression1
postfix expression12
unary expression1
cast_expression1
pm_expression1
multiplicative_expression1
additive_expression1
shift_expression1
relational_expression1
equality_expression1
and_expression1
exclusive_or_expression1
inclusive_or_expression1
logical and expression1
logical or expression1
conditional expression1
assignment expression1
expression1
expression opt2
expression statement1
statement2
statement seq1
statement seq opt2
compound statement1
statement3
iteration statement1
statement5
statement seq2
integer literal1
literal1
primary expression1
postfix expression1
unary expression1
cast_expression1
pm_expression1
multiplicative_expression1
additive_expression1
shift_expression1
relational_expression1
equality_expression1
and_expression1
exclusive_or_expression1
inclusive_or_expression1
logical and expression1
logical or expression1
conditional expression1
assignment expression1
expression1
expression opt2
jump_statement3statement6
statement seq2
statement seq opt2
compound statement1
function body1
function definition2
declaration2
declaration seq1
declaration seq opt2
translation unit1
identifier 1
identifier 1
identifier 1
	SymbolTable: program
identifier 1
	SymbolTable: program
function definition 2
adding to symbol table program:
function main
ret: int

addToSymbolTable: [1]
	*createSymbolTable*
**addFunctionBodySymbols**
**** 0 ****
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
simple declaration 1
**addSimpleDeclarations**
adding to symbol table main:
int a

addToSymbolTable: [1]
simple declaration 1 complete
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
identifier 1
int a
int a
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
literal
temp count: 0
_Const_0 0
adding to symbol table main:
int _Const_0

addToSymbolTable: [2]
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
relational_expression
	SymbolTable: main
	Operator: int : int
	Base:  int : int
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
identifier 1
int a
int a
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
literal
temp count: 1
_Const_1 0
adding to symbol table main:
int _Const_1

addToSymbolTable: [3]
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
identifier 1
UNKNOWN TYPE a
	SymbolTable: main
int a
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
jump_statement 3*** int : int ***
	int : int
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
**addFunctionBodySymbols**
literal
temp count: 2
_Const_2 0
adding to symbol table main:
int _Const_2

addToSymbolTable: [4]
**addFunctionBodySymbols**
**addFunctionBodySymbols**
function definition 2 complete [1]
translation unit 1
translation unit 1 complete
*** Calculating Offsets ***
*** Calculating Offsets ***
simple_type_specifier
type_specifier
decl_specifier
decl_specifier_seq
identifier
unqualified_id
id_expression
declarator
ctor_initializer_opt
simple_type_specifier
type_specifier
decl_specifier
decl_specifier_seq
identifier
unqualified_id
id_expression
declarator
integer_literal
literal
primary_expression
postfix_expression
unary_expression
cast_expression
pm_expression
multiplicative_expression
additive_expression
shift_expression
relational_expression
equality_expression
and_expression
exclusiv